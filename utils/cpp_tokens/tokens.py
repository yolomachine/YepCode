import clang.cindex
import clang.enumerations

punctuation = {
    '{': 'BRACE_OPEN',
    '}': 'BRACE_CLOSE',
    '(': 'PARENTHESIS_OPEN',
    ')': 'PARENTHESIS_CLOSE',
    ':': 'COLON',
    '::': 'DOUBLE_COLON',
    ';': 'SEMICOLON',
    '+': 'PLUS',
    '-': 'MINUS',
    '/': 'DIV',
    '*': 'MUL',
    '++': 'INCREMENT',
    '--': 'DECREMENT',
    '%': 'MODULO',
    '&': 'AND',
    '&D': 'REFERENCE_DECLARATION',
    '&P': 'REFERENCE_PARAM',
    '&U': 'ADDRESS',
    '&L': 'REF_CAPTURE',
    '&&': 'LOGICAL_AND',
    '&&P': 'MOVE_PARAM',
    '|': 'OR',
    '||': 'LOGICAL_OR',
    '^': 'XOR',
    '<<': 'SHIFT_LEFT',
    '>>': 'SHIFT_RIGHT',
    '~': 'NOT',
    '!': 'LOGICAL_NOT',
    '[': 'BRACKET_OPEN',
    ']': 'BRACKET_CLOSE',
    '->': 'ARROW',
    '.': 'DOT',
    '<': 'LESS',
    '>': 'GREATER',
    '<=': 'LESS_EQUAL',
    '>=': 'GREATE_EQUAL',
    '<=>': 'UFO',
    '=': 'ASSIGN',
    '==': 'EQUALS',
    '!=': 'NOT_EQUALS',
    '+=': 'ADD_ASSIGN',
    '-=': 'SUB_ASSIGN',
    '*=': 'MUL_ASSIGN',
    '/=': 'DIV_ASSIGN',
    '%=': 'MODULO_ASSIGN',
    '&=': 'AND_ASSIGN',
    '|=': 'OR_ASSIGN',
    '^=': 'XOR_ASSIGN',
    '<<=': 'SHIFT_LEFT_ASSIGN',
    '>>=': 'SHIFT_RIGHT_ASSIGN',
    '?': 'TERNARY',
    '...': 'DOTS',
    ',': 'COMMA'
}

literals = {
    clang.cindex.CursorKind.INTEGER_LITERAL: 'NUMBER',
    clang.cindex.CursorKind.FLOATING_LITERAL: 'NUMBER',
    clang.cindex.CursorKind.IMAGINARY_LITERAL: 'NUMBER',
    clang.cindex.CursorKind.STRING_LITERAL: 'STRING',
    clang.cindex.CursorKind.CHARACTER_LITERAL: 'CHAR',
}

special_identifiers = {
    'NULL': 'NULL',
    'i': 'I',
    'j': 'J',
    'k': 'K',
    'n': 'N',
    'm': 'M',
    'x': 'X',
    'y': 'Y',
    'z': 'Z',
    'size_t':  'KEYWORD_INT',
    'int8_t': 'KEYWORD_INT',
    'int16_t': 'KEYWORD_INT',
    'int32_t': 'KEYWORD_INT',
    'int64_t': 'KEYWORD_INT',
    'int_fast8_t': 'KEYWORD_INT',
    'int_fast16_t': 'KEYWORD_INT',
    'int_fast32_t': 'KEYWORD_INT',
    'int_fast64_t': 'KEYWORD_INT',
    'int_least8_t': 'KEYWORD_INT',
    'int_least16_t': 'KEYWORD_INT',
    'int_least32_t': 'KEYWORD_INT',
    'int_least64_t': 'KEYWORD_INT',
    'intmax_t': 'KEYWORD_INT',
    'intptr_t': 'KEYWORD_INT',
    'uint8_t': 'KEYWORD_INT',
    'uint16_t': 'KEYWORD_INT',
    'uint32_t': 'KEYWORD_INT',
    'uint64_t': 'KEYWORD_INT',
    'uint_fast8_t': 'KEYWORD_INT',
    'uint_fast16_t': 'KEYWORD_INT',
    'uint_fast32_t': 'KEYWORD_INT',
    'uint_fast64_t': 'KEYWORD_INT',
    'uint_least8_t': 'KEYWORD_INT',
    'uint_least16_t': 'KEYWORD_INT',
    'uint_least32_t': 'KEYWORD_INT',
    'uint_least64_t': 'KEYWORD_INT',
    'uintmax_t': 'KEYWORD_INT',
    'uintptr_t': 'KEYWORD_INT',
    'ios_base': 'STD_IOS_BASE',
    'vector': 'STD_VECTOR',
    'std::vector': 'STD_VECTOR',
    'map': 'STD_MAP',
    'std::map': 'STD_MAP',
    'unordered_map': 'STD_UNORDERED_MAP',
    'std::unordered_map': 'STD_UNORDERED_MAP',
    'set': 'STD_SET',
    'std::set': 'STD_SET',
    'unordered_set': 'STD_UNORDERED_SET',
    'std::unordered_set': 'STD_UNORDERED_SET',
    'complex': 'STD_COMPLEX',
    'std::complex': 'STD_COMPLEX',
    'pair': 'STD_PAIR',
    'std::pair': 'STD_PAIR',
    'abs': 'STD_ABS',
    'std::abs': 'STD_ABS',
    'std': 'STD',
    'get': 'STD_GET',
    'std::get': 'STD_GET',
    'cin': 'STD_CIN',
    'std::cin': 'STD_CIN',
    'cout': 'STD_COUT',
    'std::cout': 'STD_COUT',
    'floor': 'STD_FLOOR',
    'ceil': 'STD_CEIL',
    'stable_sort': 'STD_STABLE_SORT',
    'std::stable_sort': 'STD_STABLE_SORT',
    'freopen': 'FREOPEN',
    'resize': 'RESIZE',
    'push_back': 'PUSH_BACK',
    'pop': 'POP',
    'top': 'TOP',
    'insert': 'INSERT',
    'find': 'FIND',
    'endl': 'STD_ENDL',
    'std::endl': 'STD_ENDL',
    'chrono': 'STD_CHRONO',
    'std::chrono': 'STD_CHRONO',
    'array': 'STD_ARRAY',
    'std::array': 'STD_ARRAY',
    'scanf': 'SCANF',
    'printf': 'PRINTF',
    'fopen': 'FOPEN',
    'fclose': 'FCLOSE',
    'sync_with_stdio': 'SYNC_WITH_STDIO',
    'tie': 'STD_TIE',
    'ifstream': 'STD_IFSTREAM',
    'std::ifstream': 'STD_IFSTREAM',
    'ofstream': 'STD_OFSTREAM',
    'std::ofstream': 'STD_OFSTREAM',
    'istream': 'STD_ISTREAM',
    'std::istream': 'STD_ISTREAM',
    'ostream': 'STD_OSTREAM',
    'std::ostream': 'STD_OSTREAM',
    'string': 'STD_STRING',
    'std::string': 'STD_STRING'
}

special_types = {
    'size_t':  'KEYWORD_INT',
    'int8_t': 'KEYWORD_INT',
    'int16_t': 'KEYWORD_INT',
    'int32_t': 'KEYWORD_INT',
    'int64_t': 'KEYWORD_INT',
    'int_fast8_t': 'KEYWORD_INT',
    'int_fast16_t': 'KEYWORD_INT',
    'int_fast32_t': 'KEYWORD_INT',
    'int_fast64_t': 'KEYWORD_INT',
    'int_least8_t': 'KEYWORD_INT',
    'int_least16_t': 'KEYWORD_INT',
    'int_least32_t': 'KEYWORD_INT',
    'int_least64_t': 'KEYWORD_INT',
    'intmax_t': 'KEYWORD_INT',
    'intptr_t': 'KEYWORD_INT',
    'uint8_t': 'KEYWORD_INT',
    'uint16_t': 'KEYWORD_INT',
    'uint32_t': 'KEYWORD_INT',
    'uint64_t': 'KEYWORD_INT',
    'uint_fast8_t': 'KEYWORD_INT',
    'uint_fast16_t': 'KEYWORD_INT',
    'uint_fast32_t': 'KEYWORD_INT',
    'uint_fast64_t': 'KEYWORD_INT',
    'uint_least8_t': 'KEYWORD_INT',
    'uint_least16_t': 'KEYWORD_INT',
    'uint_least32_t': 'KEYWORD_INT',
    'uint_least64_t': 'KEYWORD_INT',
    'uintmax_t': 'KEYWORD_INT',
    'uintptr_t': 'KEYWORD_INT',
}

decl_types = {
    clang.cindex.CursorKind.VAR_DECL: 'VAR_DECL',
    clang.cindex.CursorKind.FUNCTION_DECL: 'FUNCTION_DECL',
    clang.cindex.CursorKind.PARM_DECL: 'PARM_DECL'
}

max_types = 50
max_identifiers = 250

identifiers = { i: f'IDENTIFIER_{i + 1}' for i in range(max_identifiers) }
types = { i: f'TYPE_{i + 1}' for i in range(max_types) }

cpp_keywords = {
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "bool",
    "break",
    "case",
    "catch",
    "char",
    "char16_t",
    "char32_t",
    "class",
    "compl",
    "concept",
    "const",
    "constexpr",
    "const_cast",
    "continue",
    "co_await",
    "co_return",
    "co_yield",
    "decltype",
    "default",
    "delete",
    "do",
    "double",
    "dynamic_cast",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "float",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "int",
    "long",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "private",
    "protected",
    "public",
    "register",
    "reinterpret_cast",
    "requires",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "static_assert",
    "static_cast",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "unsigned",
    "using",
    "virtual",
    "void",
    "volatile",
    "wchar_t",
    "while",
    "xor",
    "xor_eq",
}

keywords = { i: f'KEYWORD_{i.upper()}' for i in cpp_keywords }

includes = {
    'bits/stdc++.h',
    'cstdio',
    'cstddef',
    'cmath',
    'iostream',
    'fstream',
    'sstream',
    'vector',
    'queue',
    'stack',
    'unordered_map',
    'unordered_set',
    'map',
    'set',
    'algorithm',
    'functional',
    'numeric',
    'limits',
    'string',
    'tuple',
    'utility',
    'cstdlib',
    'cstring',
    'ctime',
    'chrono',
    'random',
    'array',
    'thread'
}

includes = { i: f'INCLUDE_{i.upper()}' for i in includes }

tokens = set(j for i in (includes, keywords, types, identifiers, decl_types, special_identifiers, literals, punctuation) for j in i.values())

simple_tokens = ['IDENTIFIER', 'TYPE', 'KEYWORD', 'INCLUDE', 'PUNCTUATION', 'LITERAL', 'MAIN_FUNCTION']
tokens = sorted(list(tokens) + simple_tokens)

token_to_id = { j: i for i, j in enumerate(tokens) }
